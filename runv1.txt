<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App with Chatbot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #71b7e6, #9b59b6);
            overflow-x: hidden;
        }

        .container {
            max-width: 400px;
            width: 90%;
            padding: 20px;
            position: relative;
        }

        .weather-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            text-align: center;
        }

        .weather-card h1 {
            font-size: 1.8rem;
            margin-bottom: 10px;
            color: #333;
        }

        .weather-emoji {
            font-size: 3rem;
            margin: 10px 0;
        }

        .temperature {
            font-size: 2.5rem;
            font-weight: bold;
            color: #2c3e50;
            margin: 10px 0;
        }

        .description {
            font-size: 1.2rem;
            text-transform: capitalize;
            color: #555;
            margin-bottom: 15px;
        }

        .details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .detail-item {
            background: rgba(0, 0, 0, 0.05);
            padding: 10px;
            border-radius: 8px;
            font-size: 0.9rem;
        }

        .error {
            color: #e74c3c;
            font-size: 1rem;
            margin-top: 10px;
            display: none;
        }

        .loading {
            font-size: 1rem;
            color: #555;
            margin-top: 10px;
            display: none;
        }

        .chat-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #2c3e50;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.3s;
        }

        .chat-button:hover {
            transform: scale(1.1);
        }

        .chatbot {
            position: fixed;
            top: 0;
            right: -100%;
            width: 350px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.98);
            box-shadow: -2px 0 10px rgba(0, 0, 0, 0.2);
            transition: right 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
        }

        .chatbot.open {
            right: 0;
        }

        .chatbot-header {
            background: #2c3e50;
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-header h2 {
            font-size: 1.2rem;
        }

        .close-chat {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
        }

        .chatbot-body {
            flex-grow: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            max-width: 80%;
            padding: 10px;
            border-radius: 10px;
            font-size: 0.9rem;
        }

        .user-message {
            background: #71b7e6;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 2px;
        }

        .ai-message {
            background: #e0e0e0;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 2px;
        }

        .typing-indicator {
            display: none;
            align-self: flex-start;
            padding: 10px;
        }

        .typing-indicator span {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #999;
            border-radius: 50%;
            margin-right: 4px;
            animation: typing 0.8s infinite;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }

        .chatbot-input {
            padding: 15px;
            border-top: 1px solid #ddd;
            display: flex;
            gap: 10px;
        }

        .chatbot-input input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }

        .chatbot-input button {
            background: #2c3e50;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 15px;
            cursor: pointer;
        }

        .chatbot-input button:hover {
            background: #34495e;
        }

        @media (max-width: 480px) {
            .container {
                width: 95%;
                padding: 10px;
            }

            .weather-card h1 {
                font-size: 1.5rem;
            }

            .temperature {
                font-size: 2rem;
            }

            .details {
                grid-template-columns: 1fr;
            }

            .chatbot {
                width: 100%;
            }

            .chat-button {
                bottom: 15px;
                right: 15px;
                width: 50px;
                height: 50px;
                font-size: 1.2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="weather-card">
            <h1 id="location">Getting location...</h1>
            <div class="loading" id="loading">Loading weather data...</div>
            <div class="weather-emoji" id="weather-emoji">‚è≥</div>
            <div class="temperature" id="temperature">--¬∞C</div>
            <div class="description" id="description">--</div>
            <div class="details">
                <div class="detail-item">Humidity: <span id="humidity">--%</span></div>
                <div class="detail-item">Wind: <span id="wind">-- km/h</span></div>
                <div class="detail-item">Feels Like: <span id="feels-like">--¬∞C</span></div>
                <div class="detail-item">Pressure: <span id="pressure">-- hPa</span></div>
            </div>
            <div class="error" id="error"></div>
        </div>
    </div>

    <button class="chat-button" id="chat-button">üí¨</button>
    <div class="chatbot" id="chatbot">
        <div class="chatbot-header">
            <h2>Weather Assistant</h2>
            <button class="close-chat" id="close-chat">‚úñ</button>
        </div>
        <div class="chatbot-body" id="chat-body">
            <div class="ai-message">Hello! I'm your weather assistant. Ask me anything! üòä</div>
        </div>
        <div class="chatbot-input">
            <input type="text" id="chat-input" placeholder="Type your message...">
            <button id="send-message">Send</button>
        </div>
    </div>

    <script>
        const WEATHER_API_KEY = 'f1908714c7112fd642dcf9863c219a66'; // Replace with your OpenWeatherMap API key
        const GEMINI_API_KEY = 'AIzaSyDamaL_ZEMs8aOKMtn5foPtGRK8k-rkoCk'; // Replace with your Gemini API key
        const weatherEmojis = {
            'clear sky': '‚òÄÔ∏è',
            'few clouds': 'üå§Ô∏è',
            'scattered clouds': '‚õÖ',
            'broken clouds': '‚òÅÔ∏è',
            'overcast clouds': '‚òÅÔ∏è',
            'shower rain': 'üå¶Ô∏è',
            'rain': 'üåßÔ∏è',
            'thunderstorm': '‚õàÔ∏è',
            'snow': '‚ùÑÔ∏è',
            'mist': 'üå´Ô∏è',
            'fog': 'üå´Ô∏è',
            'haze': 'üå´Ô∏è',
            'dust': 'üí®',
            'sand': 'üí®',
            'smoke': 'üí®',
            'squall': 'üí®',
            'tornado': 'üå™Ô∏è'
        };

        let currentWeatherData = null;

        async function getWeatherData(lat, lon) {
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${WEATHER_API_KEY}`
                );
                if (!response.ok) throw new Error('Failed to fetch weather data');
                return await response.json();
            } catch (error) {
                throw error;
            }
        }

        function updateUI(data) {
            currentWeatherData = data;
            document.getElementById('loading').style.display = 'none';
            document.getElementById('location').textContent = data.name;
            document.getElementById('temperature').textContent = `${Math.round(data.main.temp)}¬∞C`;
            document.getElementById('description').textContent = data.weather[0].description;
            document.getElementById('humidity').textContent = `${data.main.humidity}%`;
            document.getElementById('wind').textContent = `${(data.wind.speed * 3.6).toFixed(1)} km/h`;
            document.getElementById('feels-like').textContent = `${Math.round(data.main.feels_like)}¬∞C`;
            document.getElementById('pressure').textContent = `${data.main.pressure} hPa`;

            const weatherDescription = data.weather[0].description.toLowerCase();
            document.getElementById('weather-emoji').textContent = 
                weatherEmojis[weatherDescription] || 'üå°Ô∏è';
        }

        function showError(message) {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').style.display = 'block';
            document.getElementById('error').textContent = message;
            document.getElementById('weather-emoji').textContent = '‚ö†Ô∏è';
        }

        function getLocation() {
            document.getElementById('loading').style.display = 'block';
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        try {
                            const { latitude, longitude } = position.coords;
                            const data = await getWeatherData(latitude, longitude);
                            updateUI(data);
                        } catch (error) {
                            showError('Unable to fetch weather data. Please try again later.');
                        }
                    },
                    (error) => {
                        showError('Location access denied. Please enable location services.');
                    }
                );
            } else {
                showError('Geolocation is not supported by this browser.');
            }
        }

        // Chatbot functionality
        const chatButton = document.getElementById('chat-button');
        const chatbot = document.getElementById('chatbot');
        const closeChat = document.getElementById('close-chat');
        const sendMessage = document.getElementById('send-message');
        const chatInput = document.getElementById('chat-input');
        const chatBody = document.getElementById('chat-body');

        chatButton.addEventListener('click', () => {
            chatbot.classList.toggle('open');
        });

        closeChat.addEventListener('click', () => {
            chatbot.classList.remove('open');
        });

        function addMessage(content, isUser) {
            const message = document.createElement('div');
            message.classList.add('message', isUser ? 'user-message' : 'ai-message');
            message.textContent = content;
            chatBody.appendChild(message);
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function showTypingIndicator() {
            const typing = document.createElement('div');
            typing.classList.add('typing-indicator');
            typing.innerHTML = '<span></span><span></span><span></span>';
            chatBody.appendChild(typing);
            typing.style.display = 'flex';
            chatBody.scrollTop = chatBody.scrollHeight;
            return typing;
        }

        function removeTypingIndicator(typingElement) {
            if (typingElement) {
                typingElement.remove();
            }
        }

        async function getGeminiResponse(message) {
            const temperatureDetails = currentWeatherData 
                ? `Temperature: ${Math.round(currentWeatherData.main.temp)}¬∞C, Feels Like: ${Math.round(currentWeatherData.main.feels_like)}¬∞C, ${currentWeatherData.weather[0].description}, Humidity: ${currentWeatherData.main.humidity}%, Wind: ${(currentWeatherData.wind.speed * 3.6).toFixed(1)} km/h`
                : 'Weather data unavailable';
            
            const requestBody = {
                contents: [
                    {
                        parts: [
                            {
                                text: `Based on the current temperature ${temperatureDetails} ${message}`
                            }
                        ]
                    }
                ]
            };

            try {
                const response = await fetch(
                    'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-goog-api-key': GEMINI_API_KEY
                        },
                        body: JSON.stringify(requestBody)
                    }
                );

                if (!response.ok) throw new Error('Failed to fetch AI response');
                const data = await response.json();
                return data.candidates[0].content.parts[0].text;
            } catch (error) {
                return 'Sorry, I couldn‚Äôt process your request. Please try again later.';
            }
        }

        async function handleSendMessage() {
            const message = chatInput.value.trim();
            if (message) {
                addMessage(message, true);
                chatInput.value = '';
                const typingIndicator = showTypingIndicator();
                const aiResponse = await getGeminiResponse(message);
                removeTypingIndicator(typingIndicator);
                addMessage(aiResponse, false);
            }
        }

        sendMessage.addEventListener('click', handleSendMessage);

        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && chatInput.value.trim()) {
                handleSendMessage();
            }
        });

        window.onload = getLocation;
    </script>
</body>
</html>